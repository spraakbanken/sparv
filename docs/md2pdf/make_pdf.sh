#!/usr/bin/env bash
set -euo pipefail  # Exit on error, unset variables, and pipe failures
IFS=$'\n\t'        # Set safe IFS (don't split on spaces or tabs)

# Script for creating PDFs from markdown using Pandoc

# This script generates two versions of the Sparv documentation:
# 1. A version with a title page (for GU-ISS publication)
# 2. A version without a title page (for internal use)

# The script also handles files created automatically from docstrings using mkdocs. It runs mkdocs to build the
# autogenerated doc files (in HTML), preprocesses these HTML files, converts them to Markdown, and applies a Lua filter
# for handling admonitions.

# Pandoc filters are used for rendering admonitions and for removing internal links.

# The final output is a PDF file containing the user manual and developer's guide (composed from the
# markdown files in docs and the auto-generated ones from mkdocs), including a table of contents and proper formatting.

# This script requires:
# - pandoc
# - latex
# - Python mkdocs
# - Python pandocfilters
# - Python bs4

#-----------------------------------------------------------------------------------------------------------------------
# Set some variables
#-----------------------------------------------------------------------------------------------------------------------

# Directory for mkdocs output
MKDOCS_OUTPUT_DIR="site_mod"
# List of files that were created automatically from docstrings (with mkdocs)
AUTO_FILES="
../$MKDOCS_OUTPUT_DIR/developers-guide/sparv-decorators/index.html
../$MKDOCS_OUTPUT_DIR/developers-guide/sparv-classes/index.html
../$MKDOCS_OUTPUT_DIR/developers-guide/utilities/index.html
"

# Get version number from sparv/__init__.py
SPARV_VERSION=$(grep -P '(?<=__version__ = ").+(?=")' -o ../../sparv/__init__.py)

# Title page for the PDF (not used in GU-ISS publication)
TITLEPAGE="
---
title: Sparv $SPARV_VERSION - Documentation
author: |
  | Språkbanken Text
  | Institutionen för svenska, flerspråkighet och språkteknologi
  | Göteborgs universitet
  |
  |
  |
  |
  | ![](../images/sparv_detailed_orange.png){width=3cm}
---
"

# Create output directory
OUTPUT_DIR="output"
mkdir -p "$OUTPUT_DIR"

# Define file mappings for the two parts of the documentation
declare -A MD_FILES=(
    ["user-manual.md"]="$(grep -P 'user-manual/.*\.md' ../mkdocs.yml -o | sed 's/^/..\//')"
    ["dev-guide.md"]="$(grep -P 'developers-guide/.*\.md' ../mkdocs.yml -o | sed 's/^/..\//')"
)

#-----------------------------------------------------------------------------------------------------------------------
# Function to create the markdown files for user manual and developer's guide
#-----------------------------------------------------------------------------------------------------------------------
function create_markdown {
    echo "Creating markdown files for user manual and developer's guide ..."
    # Convert AUTO_FILES to a Bash array
    readarray -t auto_filenames < <(for file in $AUTO_FILES; do basename "$(dirname "$file")"; done)

    # Concat files and shift headings for each document
    for output in "${!MD_FILES[@]}"; do
        # Clear output file
        echo "" > "${OUTPUT_DIR}/${output}"

        for f in ${MD_FILES[$output]}; do

            # Check if file is in AUTO_FILES
            basename=$(basename "${f}" .md)
            in_auto_files=false
            for auto in "${auto_filenames[@]}"; do
                if [[ "$basename" == "$auto" ]]; then
                    in_auto_files=true
                    break
                fi
            done
            if $in_auto_files; then
                # Append the content of the auto-generated file instead of the original md file
                cat "${OUTPUT_DIR}/${basename}.md" >> "${OUTPUT_DIR}/${output}"
            elif [[ "$f" == *"user-manual/intro.md" ]]; then
                # Remove unwanted paragraphs from the file usermanual intro
                awk '
                BEGIN {p=1}
                # Remove the "This documentation is also available in PDF format..." paragraph
                /^This documentation is also available in PDF format\./ {p=0}
                /^$/ {if(!p){p=1; next}}
                # Remove the !!! abstract "Cite Sparv" block and its content
                /^!!! abstract "Cite Sparv"/ {p=0; next}
                p && !/^    / {p=1}
                p
                ' "$f" >> "${OUTPUT_DIR}/${output}"
            
            else
                cat "$f" >> "${OUTPUT_DIR}/${output}"
            fi
            echo -e "\n" >> "${OUTPUT_DIR}/${output}"
        done

        # Remove double dashes at the end of a line from markdown files
        perl -i -pe 's/--$//g' "${OUTPUT_DIR}/${output}"
        # Remove titles (filenames) from code blocks, e.g. ```python title="__init__.py" --> ```python
        perl -i -pe 's/```(\w+)( title="[^"]+")/```$1/g' "${OUTPUT_DIR}/${output}"

        # Shift headings by 1 level using Pandoc
        pandoc "${OUTPUT_DIR}/${output}" --shift-heading-level-by=1 -o "${OUTPUT_DIR}/${output}"

        # Convert html line breaks (`<br />`{=html} --> <br />)
        perl -i -pe 's/`<br \/>`{=html}/<br \/>/g' "${OUTPUT_DIR}/${output}"

        # Adjust table column widths in the "Available Analyses" section in the user manual
        if [[ "$output" == "user-manual.md" ]]; then
            awk '
            # Make header separators have the same width
            /^## Available Analyses/ { in_section = 1 }
            in_section && /^## / && !/^## Available Analyses/ { in_section = 0 }
            in_section && /^[ \t-]+$/ {
            print "  ----------------- ------------------------------------------------------------------------------------------------------"
            next
            }
            # Adjust remaining table rows
            in_section && /^  / {
            # Remove leading two spaces for processing
            line = substr($0, 3)
            # Find first occurrence of at least two spaces
            col = match(line, /  +/)
            if (col) {
                first = substr(line, 1, col-1)
                second = substr(line, col)
                gsub(/^ +/, "", second)
                # Pad or trim first column to 17 chars
                if (length(first) > 17) {
                first = substr(first, 1, 17)
                }
                while (length(first) < 17) first = first " "
                print "  " first " " second
                next
              }
            }
            { print }
            ' "${OUTPUT_DIR}/${output}" > "${OUTPUT_DIR}/${output}.tmp"
            mv "${OUTPUT_DIR}/${output}.tmp" "${OUTPUT_DIR}/${output}"
        fi
    done
}

#-----------------------------------------------------------------------------------------------------------------------
# Function to generate PDF with or without title page
#-----------------------------------------------------------------------------------------------------------------------
function generate_pdf {
    local titlepage=$1 # Whether to include the title page
    local mode=$2  # File format to be generated: pdf, tex, pandoc
    local output_file

    # Add title page to the output file if needed
    if [ "$titlepage" = true ]; then
        output_file="sparv-documentation"
        printf '%s' "$TITLEPAGE" > "${OUTPUT_DIR}/${output_file}.md"
    else
        output_file="GU-ISS-sparv-documentation"
        echo "" > "${OUTPUT_DIR}/${output_file}.md"
    fi
    
    echo "Generating '${OUTPUT_DIR}/${output_file}.${mode}' ..."

    # Concatenate the user manual and developer's guide and convert to PDF
    echo -e "# User Manual\n" >> "${OUTPUT_DIR}/${output_file}.md"
    cat "${OUTPUT_DIR}/user-manual.md" >> "${OUTPUT_DIR}/${output_file}.md"
    echo "\newpage" >> "${OUTPUT_DIR}/${output_file}.md"
    echo -e "# Developer's Guide\n" >> "${OUTPUT_DIR}/${output_file}.md"
    cat "${OUTPUT_DIR}/dev-guide.md" >> "${OUTPUT_DIR}/${output_file}.md"

    # If MODE == md skip running pandoc
    if [ "$mode" = "md" ]; then
        return
    fi
    markdown_to_pdf "$output_file" "$mode"
}

#-----------------------------------------------------------------------------------------------------------------------
# Function for converting markdown to pdf with Pandoc
#-----------------------------------------------------------------------------------------------------------------------
function markdown_to_pdf {
    local filename=$1 # Name of the input/output file without extension
    local mode=$2  # File format to be generated: pdf, tex, pandoc

    case $mode in
        tex)
            # Convert to .tex for debugging
            pandoc "${OUTPUT_DIR}/${filename}.md" -t latex -o "${OUTPUT_DIR}/${filename}.tex"
            ;;
        pandoc)
            # Convert to pandoc's native format for debugging filters
            pandoc "${OUTPUT_DIR}/${filename}.md" -t native -o "${OUTPUT_DIR}/${filename}.pandoc"
            ;;
        pdf)
            # Convert to pdf
            pandoc "${OUTPUT_DIR}/${filename}.md" -t latex -o "${OUTPUT_DIR}/${filename}.pdf" \
                --filter filter.py \
                -H settings_template.tex `# include in header` \
                --template template.tex `# use template` \
                --toc `# table of contents` \
                --top-level-division=chapter `# treat top-level headings as chapters` \
                -N `# numbered sections` \
                -V urlcolor=RoyalBlue `# color links blue` \
                --listings `# use listings package for LaTeX code blocks`
            ;;
        *)
            echo "Invalid mode: $mode. Use 'tex', 'pandoc', or 'pdf'."
            exit 1
            ;;
    esac
}

#-----------------------------------------------------------------------------------------------------------------------
# Parse command line arguments
#-----------------------------------------------------------------------------------------------------------------------
MODE="pdf"  # Default mode
CLEAN=1     # Clean intermediate files by default

while getopts "m:hk" opt; do
    case $opt in
        m)
            MODE=$OPTARG
            ;;
        h)
            echo "Usage: $0 [-m mode] [-k] (mode: 'tex', 'pandoc', 'pdf', 'md')"
            echo "  -m mode   Specify the output format:"
            echo "            'tex'    Generate .tex files for debugging."
            echo "            'pandoc' Generate .pandoc files for debugging filters."
            echo "            'md'     Generate .md files."
            echo "            'pdf'    Generate PDF files (default)."
            echo "  -k        Do not remove intermediate files (for debugging)."
            echo "  -h        Display this help message."
            exit 0
            ;;
        k)
            CLEAN=0
            ;;
        *)
            echo "Invalid option. Use -h for help."
            exit 1
            ;;
    esac
done

# Check if MODE is valid
if [[ ! "$MODE" =~ ^(pdf|tex|pandoc|md)$ ]]; then
    echo "Invalid mode: $MODE. Allowed values are: pdf, tex, pandoc, md."
    exit 1
fi

#-----------------------------------------------------------------------------------------------------------------------
# Build mkdocs documentation
#-----------------------------------------------------------------------------------------------------------------------
echo "Building mkdocs documentation ..."
# Copy and modify mkdocs configuration
cp ../mkdocs.yml ../mkdocs_mod.yaml
perl -p -i -e 's/docstring_section_style: .+$/docstring_section_style: list/' ../mkdocs_mod.yaml
cd ..
mkdocs build -f mkdocs_mod.yaml -d $MKDOCS_OUTPUT_DIR
cd md2pdf
echo ""

#-----------------------------------------------------------------------------------------------------------------------
# Special handling for documentation files created automatically from docstrings (with mkdocs)
#-----------------------------------------------------------------------------------------------------------------------

# Define Lua filter for admonitions in Pandoc
LUA_FILTER=$(cat <<'EOF'
function Div(el)
  if el.classes:includes("note") then
    -- Create the admonition title
    local title = pandoc.RawBlock("markdown", "> [!NOTE]")

    -- Process the content of the note
    local content = {}
    for _, block in ipairs(el.content) do
      table.insert(content, pandoc.write(pandoc.Pandoc({block}), "markdown"))
    end

    -- Combine title and content into a raw Markdown block
    local raw_md = title.text .. "\n" .. table.concat(content, "\n> ")

    -- Return the raw Markdown block
    return pandoc.RawBlock("markdown", raw_md)
  end
end
EOF
)

# Convert auto-generated files to Markdown using Pandoc with the Lua filter
for file in $AUTO_FILES; do
    filename=$(basename "$(dirname "$file")")

    # Get the original markdown file, e.g. sparv-decorators --> ../developers-guide/sparv-decorators.md
    original_md_file=""
    for md_file in ${MD_FILES[@]}; do
        if [[ "$(basename "$md_file" .md)" == "$filename" ]]; then
            original_md_file="$md_file"
            break
        fi
    done
    # Check if the markdown file contains a <style> tag and remove the module docstring if it does
    if grep -q "<style>" "$original_md_file"; then
        echo "Preprocessing auto-generated file $file --> $OUTPUT_DIR/${filename}.md and removing module docstring"
        python preprocess_html.py "$file" "$OUTPUT_DIR/${filename}.html" --hide-docstring
    else
        echo "Preprocessing auto-generated file $file --> $OUTPUT_DIR/${filename}.md"
        python preprocess_html.py "$file" "$OUTPUT_DIR/${filename}.html"
    fi

    pandoc "$OUTPUT_DIR/${filename}.html" -o "$OUTPUT_DIR/${filename}.md" --lua-filter=<(echo "$LUA_FILTER")
done

#-----------------------------------------------------------------------------------------------------------------------
# Generate documentation files
#-----------------------------------------------------------------------------------------------------------------------

# Create the markdown files for user manual and developer's guide
create_markdown

# Generate PDFs (or .tex/.pandoc files) with and without title page
generate_pdf true "$MODE"
generate_pdf false "$MODE"

#-----------------------------------------------------------------------------------------------------------------------
# Clean up intermediate files
#-----------------------------------------------------------------------------------------------------------------------
if [ "$CLEAN" -eq 1 ]; then
    echo "Cleaning up ..."
    if [ "$MODE" != "md" ]; then
        rm -f ${OUTPUT_DIR}/*.md
    fi
    rm -f ${OUTPUT_DIR}/*.html
    rm -rf ../$MKDOCS_OUTPUT_DIR
    rm -f ../mkdocs_mod.yaml
fi

#-----------------------------------------------------------------------------------------------------------------------
# Print message about created files
#-----------------------------------------------------------------------------------------------------------------------
echo -e "\nThe following files have been created in the '${OUTPUT_DIR}' directory:"
case $MODE in
    tex)
        echo "- sparv-documentation.tex"
        echo "- GU-ISS-sparv-documentation.tex"
        ;;
    pandoc)
        echo "- sparv-documentation.pandoc"
        echo "- GU-ISS-sparv-documentation.pandoc"
        ;;
    md)
        echo "- sparv-documentation.md"
        echo "- GU-ISS-sparv-documentation.md"
        ;;
    pdf)
        echo "- sparv-documentation.pdf"
        echo "- GU-ISS-sparv-documentation.pdf"
        ;;
esac
